// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	UnaryEmpty(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryEmptyResponse, error)
	UnaryReqParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryEmptyResponse, error)
	UnaryResParams(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryResponseParams, error)
	UnaryParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryResponseParams, error)
	UnaryParamsAny(ctx context.Context, in *UnaryRequestParamsAny, opts ...grpc.CallOption) (*UnaryResponseParamsAny, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (Test_ServerStreamClient, error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (Test_StreamClient, error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) UnaryEmpty(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryEmptyResponse, error) {
	out := new(UnaryEmptyResponse)
	err := c.cc.Invoke(ctx, "/go.client.test.Test/UnaryEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryReqParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryEmptyResponse, error) {
	out := new(UnaryEmptyResponse)
	err := c.cc.Invoke(ctx, "/go.client.test.Test/UnaryReqParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryResParams(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryResponseParams, error) {
	out := new(UnaryResponseParams)
	err := c.cc.Invoke(ctx, "/go.client.test.Test/UnaryResParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryResponseParams, error) {
	out := new(UnaryResponseParams)
	err := c.cc.Invoke(ctx, "/go.client.test.Test/UnaryParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryParamsAny(ctx context.Context, in *UnaryRequestParamsAny, opts ...grpc.CallOption) (*UnaryResponseParamsAny, error) {
	out := new(UnaryResponseParamsAny)
	err := c.cc.Invoke(ctx, "/go.client.test.Test/UnaryParamsAny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Test_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], "/go.client.test.Test/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testClientStreamClient{stream}
	return x, nil
}

type Test_ClientStreamClient interface {
	Send(*UnaryRequestParams) error
	CloseAndRecv() (*UnaryResponseParams, error)
	grpc.ClientStream
}

type testClientStreamClient struct {
	grpc.ClientStream
}

func (x *testClientStreamClient) Send(m *UnaryRequestParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testClientStreamClient) CloseAndRecv() (*UnaryResponseParams, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UnaryResponseParams)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) ServerStream(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (Test_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], "/go.client.test.Test/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_ServerStreamClient interface {
	Recv() (*UnaryResponseParams, error)
	grpc.ClientStream
}

type testServerStreamClient struct {
	grpc.ClientStream
}

func (x *testServerStreamClient) Recv() (*UnaryResponseParams, error) {
	m := new(UnaryResponseParams)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Test_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], "/go.client.test.Test/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testStreamClient{stream}
	return x, nil
}

type Test_StreamClient interface {
	Send(*UnaryRequestParams) error
	Recv() (*UnaryResponseParams, error)
	grpc.ClientStream
}

type testStreamClient struct {
	grpc.ClientStream
}

func (x *testStreamClient) Send(m *UnaryRequestParams) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testStreamClient) Recv() (*UnaryResponseParams, error) {
	m := new(UnaryResponseParams)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility
type TestServer interface {
	UnaryEmpty(context.Context, *UnaryEmptyRequest) (*UnaryEmptyResponse, error)
	UnaryReqParams(context.Context, *UnaryRequestParams) (*UnaryEmptyResponse, error)
	UnaryResParams(context.Context, *UnaryEmptyRequest) (*UnaryResponseParams, error)
	UnaryParams(context.Context, *UnaryRequestParams) (*UnaryResponseParams, error)
	UnaryParamsAny(context.Context, *UnaryRequestParamsAny) (*UnaryResponseParamsAny, error)
	ClientStream(Test_ClientStreamServer) error
	ServerStream(*UnaryRequestParams, Test_ServerStreamServer) error
	Stream(Test_StreamServer) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have forward compatible implementations.
type UnimplementedTestServer struct {
}

func (UnimplementedTestServer) UnaryEmpty(context.Context, *UnaryEmptyRequest) (*UnaryEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEmpty not implemented")
}
func (UnimplementedTestServer) UnaryReqParams(context.Context, *UnaryRequestParams) (*UnaryEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryReqParams not implemented")
}
func (UnimplementedTestServer) UnaryResParams(context.Context, *UnaryEmptyRequest) (*UnaryResponseParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryResParams not implemented")
}
func (UnimplementedTestServer) UnaryParams(context.Context, *UnaryRequestParams) (*UnaryResponseParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryParams not implemented")
}
func (UnimplementedTestServer) UnaryParamsAny(context.Context, *UnaryRequestParamsAny) (*UnaryResponseParamsAny, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryParamsAny not implemented")
}
func (UnimplementedTestServer) ClientStream(Test_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestServer) ServerStream(*UnaryRequestParams, Test_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestServer) Stream(Test_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_UnaryEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.client.test.Test/UnaryEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryEmpty(ctx, req.(*UnaryEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryReqParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryReqParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.client.test.Test/UnaryReqParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryReqParams(ctx, req.(*UnaryRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryResParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryResParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.client.test.Test/UnaryResParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryResParams(ctx, req.(*UnaryEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.client.test.Test/UnaryParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryParams(ctx, req.(*UnaryRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryParamsAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParamsAny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryParamsAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/go.client.test.Test/UnaryParamsAny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryParamsAny(ctx, req.(*UnaryRequestParamsAny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStream(&testClientStreamServer{stream})
}

type Test_ClientStreamServer interface {
	SendAndClose(*UnaryResponseParams) error
	Recv() (*UnaryRequestParams, error)
	grpc.ServerStream
}

type testClientStreamServer struct {
	grpc.ServerStream
}

func (x *testClientStreamServer) SendAndClose(m *UnaryResponseParams) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testClientStreamServer) Recv() (*UnaryRequestParams, error) {
	m := new(UnaryRequestParams)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnaryRequestParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &testServerStreamServer{stream})
}

type Test_ServerStreamServer interface {
	Send(*UnaryResponseParams) error
	grpc.ServerStream
}

type testServerStreamServer struct {
	grpc.ServerStream
}

func (x *testServerStreamServer) Send(m *UnaryResponseParams) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).Stream(&testStreamServer{stream})
}

type Test_StreamServer interface {
	Send(*UnaryResponseParams) error
	Recv() (*UnaryRequestParams, error)
	grpc.ServerStream
}

type testStreamServer struct {
	grpc.ServerStream
}

func (x *testStreamServer) Send(m *UnaryResponseParams) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testStreamServer) Recv() (*UnaryRequestParams, error) {
	m := new(UnaryRequestParams)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.client.test.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEmpty",
			Handler:    _Test_UnaryEmpty_Handler,
		},
		{
			MethodName: "UnaryReqParams",
			Handler:    _Test_UnaryReqParams_Handler,
		},
		{
			MethodName: "UnaryResParams",
			Handler:    _Test_UnaryResParams_Handler,
		},
		{
			MethodName: "UnaryParams",
			Handler:    _Test_UnaryParams_Handler,
		},
		{
			MethodName: "UnaryParamsAny",
			Handler:    _Test_UnaryParamsAny_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Test_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _Test_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tests/pb/test.proto",
}
