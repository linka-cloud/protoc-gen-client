// Copyright 2022 Linka Cloud  All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tests/pb/test.proto

package test

import (
	context "context"
	external "go.linka.cloud/protoc-gen-client/tests/pb/external"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Test_UnaryEmpty_FullMethodName       = "/go.client.test.Test/UnaryEmpty"
	Test_UnaryReqParams_FullMethodName   = "/go.client.test.Test/UnaryReqParams"
	Test_UnaryResParams_FullMethodName   = "/go.client.test.Test/UnaryResParams"
	Test_UnaryOneOfParams_FullMethodName = "/go.client.test.Test/UnaryOneOfParams"
	Test_UnaryParams_FullMethodName      = "/go.client.test.Test/UnaryParams"
	Test_UnaryExternal_FullMethodName    = "/go.client.test.Test/UnaryExternal"
	Test_UnaryParamsAny_FullMethodName   = "/go.client.test.Test/UnaryParamsAny"
	Test_ClientStream_FullMethodName     = "/go.client.test.Test/ClientStream"
	Test_ServerStream_FullMethodName     = "/go.client.test.Test/ServerStream"
	Test_Stream_FullMethodName           = "/go.client.test.Test/Stream"
)

// TestClient is the client API for Test service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestClient interface {
	UnaryEmpty(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryEmptyResponse, error)
	UnaryReqParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryEmptyResponse, error)
	UnaryResParams(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryResponseParams, error)
	UnaryOneOfParams(ctx context.Context, in *UnaryOneOfParamsMsg, opts ...grpc.CallOption) (*UnaryOneOfParamsMsg, error)
	UnaryParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryResponseParams, error)
	UnaryExternal(ctx context.Context, in *external.External, opts ...grpc.CallOption) (*external.External, error)
	UnaryParamsAny(ctx context.Context, in *UnaryRequestParamsAny, opts ...grpc.CallOption) (*UnaryResponseParamsAny, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnaryRequestParams, UnaryResponseParams], error)
	ServerStream(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnaryResponseParams], error)
	Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UnaryRequestParams, UnaryResponseParams], error)
}

type testClient struct {
	cc grpc.ClientConnInterface
}

func NewTestClient(cc grpc.ClientConnInterface) TestClient {
	return &testClient{cc}
}

func (c *testClient) UnaryEmpty(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryEmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryEmptyResponse)
	err := c.cc.Invoke(ctx, Test_UnaryEmpty_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryReqParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryEmptyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryEmptyResponse)
	err := c.cc.Invoke(ctx, Test_UnaryReqParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryResParams(ctx context.Context, in *UnaryEmptyRequest, opts ...grpc.CallOption) (*UnaryResponseParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponseParams)
	err := c.cc.Invoke(ctx, Test_UnaryResParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryOneOfParams(ctx context.Context, in *UnaryOneOfParamsMsg, opts ...grpc.CallOption) (*UnaryOneOfParamsMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryOneOfParamsMsg)
	err := c.cc.Invoke(ctx, Test_UnaryOneOfParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryParams(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (*UnaryResponseParams, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponseParams)
	err := c.cc.Invoke(ctx, Test_UnaryParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryExternal(ctx context.Context, in *external.External, opts ...grpc.CallOption) (*external.External, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(external.External)
	err := c.cc.Invoke(ctx, Test_UnaryExternal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) UnaryParamsAny(ctx context.Context, in *UnaryRequestParamsAny, opts ...grpc.CallOption) (*UnaryResponseParamsAny, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnaryResponseParamsAny)
	err := c.cc.Invoke(ctx, Test_UnaryParamsAny_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UnaryRequestParams, UnaryResponseParams], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[0], Test_ClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnaryRequestParams, UnaryResponseParams]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_ClientStreamClient = grpc.ClientStreamingClient[UnaryRequestParams, UnaryResponseParams]

func (c *testClient) ServerStream(ctx context.Context, in *UnaryRequestParams, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnaryResponseParams], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[1], Test_ServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnaryRequestParams, UnaryResponseParams]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_ServerStreamClient = grpc.ServerStreamingClient[UnaryResponseParams]

func (c *testClient) Stream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[UnaryRequestParams, UnaryResponseParams], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Test_ServiceDesc.Streams[2], Test_Stream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UnaryRequestParams, UnaryResponseParams]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_StreamClient = grpc.BidiStreamingClient[UnaryRequestParams, UnaryResponseParams]

// TestServer is the server API for Test service.
// All implementations must embed UnimplementedTestServer
// for forward compatibility.
type TestServer interface {
	UnaryEmpty(context.Context, *UnaryEmptyRequest) (*UnaryEmptyResponse, error)
	UnaryReqParams(context.Context, *UnaryRequestParams) (*UnaryEmptyResponse, error)
	UnaryResParams(context.Context, *UnaryEmptyRequest) (*UnaryResponseParams, error)
	UnaryOneOfParams(context.Context, *UnaryOneOfParamsMsg) (*UnaryOneOfParamsMsg, error)
	UnaryParams(context.Context, *UnaryRequestParams) (*UnaryResponseParams, error)
	UnaryExternal(context.Context, *external.External) (*external.External, error)
	UnaryParamsAny(context.Context, *UnaryRequestParamsAny) (*UnaryResponseParamsAny, error)
	ClientStream(grpc.ClientStreamingServer[UnaryRequestParams, UnaryResponseParams]) error
	ServerStream(*UnaryRequestParams, grpc.ServerStreamingServer[UnaryResponseParams]) error
	Stream(grpc.BidiStreamingServer[UnaryRequestParams, UnaryResponseParams]) error
	mustEmbedUnimplementedTestServer()
}

// UnimplementedTestServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTestServer struct{}

func (UnimplementedTestServer) UnaryEmpty(context.Context, *UnaryEmptyRequest) (*UnaryEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEmpty not implemented")
}
func (UnimplementedTestServer) UnaryReqParams(context.Context, *UnaryRequestParams) (*UnaryEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryReqParams not implemented")
}
func (UnimplementedTestServer) UnaryResParams(context.Context, *UnaryEmptyRequest) (*UnaryResponseParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryResParams not implemented")
}
func (UnimplementedTestServer) UnaryOneOfParams(context.Context, *UnaryOneOfParamsMsg) (*UnaryOneOfParamsMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryOneOfParams not implemented")
}
func (UnimplementedTestServer) UnaryParams(context.Context, *UnaryRequestParams) (*UnaryResponseParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryParams not implemented")
}
func (UnimplementedTestServer) UnaryExternal(context.Context, *external.External) (*external.External, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryExternal not implemented")
}
func (UnimplementedTestServer) UnaryParamsAny(context.Context, *UnaryRequestParamsAny) (*UnaryResponseParamsAny, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryParamsAny not implemented")
}
func (UnimplementedTestServer) ClientStream(grpc.ClientStreamingServer[UnaryRequestParams, UnaryResponseParams]) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedTestServer) ServerStream(*UnaryRequestParams, grpc.ServerStreamingServer[UnaryResponseParams]) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedTestServer) Stream(grpc.BidiStreamingServer[UnaryRequestParams, UnaryResponseParams]) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}
func (UnimplementedTestServer) mustEmbedUnimplementedTestServer() {}
func (UnimplementedTestServer) testEmbeddedByValue()              {}

// UnsafeTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServer will
// result in compilation errors.
type UnsafeTestServer interface {
	mustEmbedUnimplementedTestServer()
}

func RegisterTestServer(s grpc.ServiceRegistrar, srv TestServer) {
	// If the following call pancis, it indicates UnimplementedTestServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Test_ServiceDesc, srv)
}

func _Test_UnaryEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryEmpty(ctx, req.(*UnaryEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryReqParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryReqParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryReqParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryReqParams(ctx, req.(*UnaryRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryResParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryResParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryResParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryResParams(ctx, req.(*UnaryEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryOneOfParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryOneOfParamsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryOneOfParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryOneOfParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryOneOfParams(ctx, req.(*UnaryOneOfParamsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryParams(ctx, req.(*UnaryRequestParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryExternal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(external.External)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryExternal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryExternal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryExternal(ctx, req.(*external.External))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_UnaryParamsAny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryRequestParamsAny)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).UnaryParamsAny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Test_UnaryParamsAny_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).UnaryParamsAny(ctx, req.(*UnaryRequestParamsAny))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).ClientStream(&grpc.GenericServerStream[UnaryRequestParams, UnaryResponseParams]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_ClientStreamServer = grpc.ClientStreamingServer[UnaryRequestParams, UnaryResponseParams]

func _Test_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnaryRequestParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).ServerStream(m, &grpc.GenericServerStream[UnaryRequestParams, UnaryResponseParams]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_ServerStreamServer = grpc.ServerStreamingServer[UnaryResponseParams]

func _Test_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).Stream(&grpc.GenericServerStream[UnaryRequestParams, UnaryResponseParams]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Test_StreamServer = grpc.BidiStreamingServer[UnaryRequestParams, UnaryResponseParams]

// Test_ServiceDesc is the grpc.ServiceDesc for Test service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Test_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go.client.test.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEmpty",
			Handler:    _Test_UnaryEmpty_Handler,
		},
		{
			MethodName: "UnaryReqParams",
			Handler:    _Test_UnaryReqParams_Handler,
		},
		{
			MethodName: "UnaryResParams",
			Handler:    _Test_UnaryResParams_Handler,
		},
		{
			MethodName: "UnaryOneOfParams",
			Handler:    _Test_UnaryOneOfParams_Handler,
		},
		{
			MethodName: "UnaryParams",
			Handler:    _Test_UnaryParams_Handler,
		},
		{
			MethodName: "UnaryExternal",
			Handler:    _Test_UnaryExternal_Handler,
		},
		{
			MethodName: "UnaryParamsAny",
			Handler:    _Test_UnaryParamsAny_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Test_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Test_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Stream",
			Handler:       _Test_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tests/pb/test.proto",
}
